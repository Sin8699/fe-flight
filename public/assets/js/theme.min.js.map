{"version":3,"sources":["utils.js","detector.js","bootstrap-navbar.js","scroll-to-top.js"],"names":["docReady","fn","document","readyState","addEventListener","setTimeout","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","_","c","toUpperCase","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","color","alpha","colors","primary","secondary","success","info","warning","danger","light","dark","grays","white","100","200","300","400","500","600","700","800","900","1000","1100","black","hasClass","className","classList","value","includes","addClass","add","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","documentElement","scrollTop","pageYOffset","top","left","isScrolledIntoView","offsetTop","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","all","innerHeight","innerWidth","partial","breakpoints","xs","sm","md","lg","xl","xxl","getBreakpoint","classes","breakpoint","split","filter","cls","pop","setCookie","name","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","match","settings","tinymce","theme","chart","borderColor","newChart","config","ctx","getContext","Chart","getItemFromStore","key","defaultValue","store","localStorage","getItem","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","utils","detectorInit","is","html","querySelector","opera","mobile","firefox","safari","ios","iphone","ipad","ie","edge","chrome","mac","windows","navigator","userAgent","navbarInit","Selector","NAVBAR","NAVBAR_COLLAPSE","NAVBAR_TOGGLER","ClassNames","COLLAPSED","Events","SCROLL","SHOW_BS_COLLAPSE","HIDE_BS_COLLAPSE","HIDDEN_BS_COLLAPSE","navbar","target","contains","click","windowHeight","navbarCollapse","allColors","colorName","Object","keys","bgClassName","paddingName","colorRgb","backgroundImage","getComputedStyle","style","remove","backgroundColor","breakPoint","transition","scrollToTop","querySelectorAll","forEach","anchor","preventDefault","id","getAttribute","scroll","behavior","location","hash"],"mappings":"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","file":"theme.min.js","sourcesContent":["/* -------------------------------------------------------------------------- */\r\n/*                                    Utils                                   */\r\n/* -------------------------------------------------------------------------- */\r\nconst docReady = (fn) => {\r\n  // see if DOM is already available\r\n  if (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", fn);\r\n  } else {\r\n    setTimeout(fn, 1);\r\n  }\r\n};\r\n\r\nconst resize = (fn) => window.addEventListener(\"resize\", fn);\r\n\r\nconst isIterableArray = (array) => Array.isArray(array) && !!array.length;\r\n\r\nconst camelize = (str) => {\r\n  const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) =>\r\n    c ? c.toUpperCase() : \"\"\r\n  );\r\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n};\r\n\r\nconst getData = (el, data) => {\r\n  try {\r\n    return JSON.parse(el.dataset[camelize(data)]);\r\n  } catch (e) {\r\n    return el.dataset[camelize(data)];\r\n  }\r\n};\r\n\r\n/* ----------------------------- Colors function ---------------------------- */\r\n\r\nconst hexToRgb = (hexValue) => {\r\n  let hex;\r\n  hexValue.indexOf(\"#\") === 0\r\n    ? (hex = hexValue.substring(1))\r\n    : (hex = hexValue);\r\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\r\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\r\n  );\r\n  return result\r\n    ? [\r\n        parseInt(result[1], 16),\r\n        parseInt(result[2], 16),\r\n        parseInt(result[3], 16),\r\n      ]\r\n    : null;\r\n};\r\n\r\nconst rgbaColor = (color = \"#fff\", alpha = 0.5) =>\r\n  `rgba(${hexToRgb(color)}, ${alpha})`;\r\n\r\n/* --------------------------------- Colors --------------------------------- */\r\n\r\nconst colors = {\r\n  primary: \"#0091e9\",\r\n  secondary: \"#002147\",\r\n  success: \"#00d27a\",\r\n  info: \"#27bcfd\",\r\n  warning: \"#FFC928\",\r\n  danger: \"#EE4D47\",\r\n  light: \"#F9FAFD\",\r\n  dark: \"#000\",\r\n};\r\n\r\nconst grays = {\r\n  white: \"#fff\",\r\n  100: \"#f9fafd\",\r\n  200: \"#edf2f9\",\r\n  300: \"#d8e2ef\",\r\n  400: \"#b6c1d2\",\r\n  500: \"#9da9bb\",\r\n  600: \"#748194\",\r\n  700: \"#5e6e82\",\r\n  800: \"#4d5969\",\r\n  900: \"#344050\",\r\n  1000: \"#232e3c\",\r\n  1100: \"#0b1727\",\r\n  black: \"#000\",\r\n};\r\n\r\nconst hasClass = (el, className) => {\r\n  !el && false;\r\n  return el.classList.value.includes(className);\r\n};\r\n\r\nconst addClass = (el, className) => {\r\n  el.classList.add(className);\r\n};\r\n\r\nconst getOffset = (el) => {\r\n  const rect = el.getBoundingClientRect();\r\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\r\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\r\n};\r\n\r\nconst isScrolledIntoView = (el) => {\r\n  let top = el.offsetTop;\r\n  let left = el.offsetLeft;\r\n  const width = el.offsetWidth;\r\n  const height = el.offsetHeight;\r\n\r\n  while (el.offsetParent) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    el = el.offsetParent;\r\n    top += el.offsetTop;\r\n    left += el.offsetLeft;\r\n  }\r\n\r\n  return {\r\n    all:\r\n      top >= window.pageYOffset &&\r\n      left >= window.pageXOffset &&\r\n      top + height <= window.pageYOffset + window.innerHeight &&\r\n      left + width <= window.pageXOffset + window.innerWidth,\r\n    partial:\r\n      top < window.pageYOffset + window.innerHeight &&\r\n      left < window.pageXOffset + window.innerWidth &&\r\n      top + height > window.pageYOffset &&\r\n      left + width > window.pageXOffset,\r\n  };\r\n};\r\n\r\nconst breakpoints = {\r\n  xs: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n  xxl: 1540,\r\n};\r\n\r\nconst getBreakpoint = (el) => {\r\n  const classes = el && el.classList.value;\r\n  let breakpoint;\r\n  if (classes) {\r\n    breakpoint =\r\n      breakpoints[\r\n        classes\r\n          .split(\" \")\r\n          .filter((cls) => cls.includes(\"navbar-expand-\"))\r\n          .pop()\r\n          .split(\"-\")\r\n          .pop()\r\n      ];\r\n  }\r\n  return breakpoint;\r\n};\r\n\r\n/* --------------------------------- Cookie --------------------------------- */\r\n\r\nconst setCookie = (name, value, expire) => {\r\n  const expires = new Date();\r\n  expires.setTime(expires.getTime() + expire);\r\n  document.cookie = name + \"=\" + value + \";expires=\" + expires.toUTCString();\r\n};\r\n\r\nconst getCookie = (name) => {\r\n  var keyValue = document.cookie.match(\"(^|;) ?\" + name + \"=([^;]*)(;|$)\");\r\n  return keyValue ? keyValue[2] : keyValue;\r\n};\r\n\r\nconst settings = {\r\n  tinymce: {\r\n    theme: \"oxide\",\r\n  },\r\n  chart: {\r\n    borderColor: \"rgba(255, 255, 255, 0.8)\",\r\n  },\r\n};\r\n\r\n/* -------------------------- Chart Initialization -------------------------- */\r\n\r\nconst newChart = (chart, config) => {\r\n  const ctx = chart.getContext(\"2d\");\r\n  return new window.Chart(ctx, config);\r\n};\r\n\r\n/* ---------------------------------- Store --------------------------------- */\r\n\r\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\r\n  try {\r\n    return JSON.parse(store.getItem(key)) || defaultValue;\r\n  } catch {\r\n    return store.getItem(key) || defaultValue;\r\n  }\r\n};\r\n\r\nconst setItemToStore = (key, payload, store = localStorage) =>\r\n  store.setItem(key, payload);\r\nconst getStoreSpace = (store = localStorage) =>\r\n  parseFloat(\r\n    (\r\n      escape(encodeURIComponent(JSON.stringify(store))).length /\r\n      (1024 * 1024)\r\n    ).toFixed(2)\r\n  );\r\n\r\nconst utils = {\r\n  docReady,\r\n  resize,\r\n  isIterableArray,\r\n  camelize,\r\n  getData,\r\n  hasClass,\r\n  addClass,\r\n  hexToRgb,\r\n  rgbaColor,\r\n  colors,\r\n  grays,\r\n  getOffset,\r\n  isScrolledIntoView,\r\n  getBreakpoint,\r\n  setCookie,\r\n  getCookie,\r\n  newChart,\r\n  settings,\r\n  getItemFromStore,\r\n  setItemToStore,\r\n  getStoreSpace,\r\n};\r\nexport default utils;\r\n","import { addClass } from './utils';\r\n/* -------------------------------------------------------------------------- */\r\n/*                                  Detector                                  */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst detectorInit = () => {\r\n  const { is } = window;\r\n  const html = document.querySelector('html');\r\n  is.opera() && addClass(html, 'opera');\r\n  is.mobile() && addClass(html, 'mobile');\r\n  is.firefox() && addClass(html, 'firefox');\r\n  is.safari() && addClass(html, 'safari');\r\n  is.ios() && addClass(html, 'ios');\r\n  is.iphone() && addClass(html, 'iphone');\r\n  is.ipad() && addClass(html, 'ipad');\r\n  is.ie() && addClass(html, 'ie');\r\n  is.edge() && addClass(html, 'edge');\r\n  is.chrome() && addClass(html, 'chrome');\r\n  is.mac() && addClass(html, 'osx');\r\n  is.windows() && addClass(html, 'windows');\r\n  navigator.userAgent.match('CriOS') && addClass(html, 'chrome');\r\n\r\n};\r\n\r\nexport default detectorInit;\r\n","import utils from './utils';\r\n/*-----------------------------------------------\r\n|   Top navigation opacity on scroll\r\n-----------------------------------------------*/\r\nconst navbarInit = () => {\r\n  const Selector = {\r\n    NAVBAR: '[data-navbar-on-scroll]',\r\n    NAVBAR_COLLAPSE: '.navbar-collapse',\r\n    NAVBAR_TOGGLER: '.navbar-toggler',\r\n\r\n  };\r\n\r\n  const ClassNames = {\r\n    COLLAPSED: 'collapsed',\r\n  };\r\n\r\n  const Events = {\r\n    SCROLL: 'scroll',\r\n    SHOW_BS_COLLAPSE: 'show.bs.collapse',\r\n    HIDE_BS_COLLAPSE: 'hide.bs.collapse',\r\n    HIDDEN_BS_COLLAPSE: 'hidden.bs.collapse',\r\n  };\r\n\r\n  const DataKey = {\r\n    NAVBAR_ON_SCROLL: 'navbar-light-on-scroll'\r\n  };\r\n  const navbar = document.querySelector(Selector.NAVBAR);\r\n  // responsive nav collapsed\r\n  navbar.addEventListener('click', (e) => {\r\n    if (e.target.classList.contains('nav-link') && window.innerWidth < utils.getBreakpoint(navbar)) {\r\n      navbar.querySelector(Selector.NAVBAR_TOGGLER).click();\r\n    }\r\n  });\r\n\r\n  if (navbar) {\r\n    const windowHeight = window.innerHeight;\r\n    const html = document.documentElement;\r\n    const navbarCollapse = navbar.querySelector(Selector.NAVBAR_COLLAPSE);\r\n    const allColors = { ...utils.colors, ...utils.grays };\r\n\r\n    const name = utils.getData(navbar, DataKey.NAVBAR_ON_SCROLL);\r\n    const colorName = Object.keys(allColors).includes(name) ? name : 'light';\r\n    const color = allColors[colorName];\r\n    const bgClassName = `bg-${colorName}`;\r\n    const paddingName = 'padding-transition';\r\n    const colorRgb = utils.hexToRgb(color);\r\n    const { backgroundImage } = window.getComputedStyle(navbar);\r\n    const transition = 'background-color,padding 0.35s ease';\r\n    navbar.style.backgroundImage = 'none';\r\n\r\n    // Change navbar background color on scroll\r\n    window.addEventListener(Events.SCROLL, () => {\r\n      const { scrollTop } = html;\r\n      let alpha = (scrollTop / windowHeight) * 0.35;\r\n      // Add class on scroll\r\n      navbar.classList.add('backdrop');\r\n      if (alpha === 0) {\r\n        navbar.classList.remove('backdrop');\r\n      }\r\n      alpha >= 1 && (alpha = 1);\r\n      navbar.style.backgroundColor = `rgba(${colorRgb[0]}, ${colorRgb[1]}, ${colorRgb[2]}, ${alpha})`;\r\n      navbar.style.backgroundImage = (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? backgroundImage : 'none';\r\n      (alpha > 0 || utils.hasClass(navbarCollapse, 'show')) ? navbar.classList.add(paddingName) : navbar.classList.remove(paddingName);\r\n    });\r\n\r\n    // Toggle bg class on window resize\r\n    utils.resize(() => {\r\n      const breakPoint = utils.getBreakpoint(navbar);\r\n      if (window.innerWidth > breakPoint) {\r\n        navbar.style.backgroundImage = html.scrollTop ? backgroundImage : 'none';\r\n        // navbar.style.transition = 'none';\r\n      } else if (\r\n        !utils.hasClass(\r\n          navbar.querySelector(Selector.NAVBAR_TOGGLER),\r\n          ClassNames.COLLAPSED\r\n        )\r\n      ) {\r\n        // navbar.classList.add(bgClassName);\r\n        // navbar.classList.add(paddingName);\r\n        navbar.style.backgroundImage = backgroundImage;\r\n      }\r\n\r\n      if (window.innerWidth <= breakPoint) {\r\n        // navbar.style.transition = utils.hasClass(navbarCollapse, 'show') ? transition : 'none';\r\n      }\r\n\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.SHOW_BS_COLLAPSE, () => {\r\n      navbar.classList.add(bgClassName);\r\n      // navbar.classList.add(paddingName);\r\n      navbar.style.backgroundImage = backgroundImage;\r\n      navbar.style.transition = transition;\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.HIDE_BS_COLLAPSE, () => {\r\n      navbar.classList.remove(bgClassName);\r\n      // navbar.classList.remove(paddingName);\r\n      !html.scrollTop && (navbar.style.backgroundImage = 'none');\r\n    });\r\n\r\n    navbarCollapse.addEventListener(Events.HIDDEN_BS_COLLAPSE, () => {\r\n      // navbar.style.transition = 'none';\r\n    });\r\n\r\n  }\r\n\r\n};\r\n\r\nexport default navbarInit;\r\n","import utils from './utils';\r\n/* -------------------------------------------------------------------------- */\r\n/*                                Scroll To Top                               */\r\n/* -------------------------------------------------------------------------- */\r\nconst scrollToTop = () => {\r\n  document\r\n    .querySelectorAll('[data-anchor] > a, [data-scroll-to]')\r\n    .forEach((anchor) => {\r\n      anchor.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        const el = e.target;\r\n        const id = utils.getData(el, 'scroll-to') || el.getAttribute('href');\r\n        window.scroll({\r\n          top:\r\n            utils.getData(el, 'offset-top') ??\r\n            utils.getOffset(document.querySelector(id)).top - 100,\r\n          left: 0,\r\n          behavior: 'smooth',\r\n        });\r\n        window.location.hash = id;\r\n      });\r\n    });\r\n};\r\nexport default scrollToTop;"]}